#define F_CPU 2000000
#include <avr/interrupt.h>
#include <util/delay.h>

#define lcd_data PORTJ_OUT
#define E_Low() PORTK_OUTCLR=PIN0_bm
#define E_High() PORTK_OUTSET=PIN0_bm
#define RS_Low() PORTK_OUTCLR=PIN2_bm
#define RS_High() PORTK_OUTSET=PIN2_bm
#define RST_Low() PORTK_OUTCLR=PIN3_bm
#define RST_High() PORTK_OUTSET=PIN3_bm
#define CS1_Low() PORTK_OUTSET=PIN4_bm
#define CS1_High() PORTK_OUTCLR=PIN4_bm
#define CS2_Low() PORTK_OUTSET=PIN5_bm
#define CS2_High() PORTK_OUTCLR=PIN5_bm

void glcd_init(void);
void lcd_dataout(unsigned char data);
void lcd_command(unsigned char command);
void set_page_left(unsigned char page);
void set_page_right(unsigned char page);
void set_y_left(unsigned char y);
void set_y_right(unsigned char y);

unsigned char xmega[512]={
	0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xF0,0xF0,0xF0,0xE0,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xE0,0xF0,0xF0,0xF0,0x30,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,
	0xF0,0xF0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xF0,0xF0,
	0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x70,0x70,0x70,0x70,
	0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x70,0x00,0x00,0x00,0x00,0x00,0x00,
	0x80,0xC0,0xE0,0xE0,0xE0,0xF0,0x70,0x70,0x70,0x70,0x70,0xF0,0xE0,0xE0,0xE0,0xC0,
	0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xF0,
	0xF0,0xF0,0xF0,0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x0F,0x1F,0x3F,0xFE,0xF8,0xF0,
	0xF8,0xFE,0x3F,0x1F,0x0F,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
	0xFF,0x7F,0xFF,0xFF,0xF8,0xC0,0x00,0x00,0x00,0x00,0xC0,0xF8,0xFF,0xFF,0x7F,0xFF,
	0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE0,0xE0,0xE0,0xE0,
	0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0xF0,0xFE,0xFF,
	0xFF,0x0F,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x83,0x8F,
	0x8F,0x8F,0x8E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xFE,0xFF,0x7F,0x1F,
	0x03,0x03,0x1F,0x7F,0xFF,0xFE,0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xE0,0xF0,0xF8,0xFE,0x3F,0x1F,0x0F,0x03,
	0x0F,0x1F,0x3F,0xFE,0xF8,0xF0,0xE0,0x80,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
	0xFF,0x00,0x03,0x1F,0xFF,0xFF,0xFE,0xF0,0xF0,0xFE,0xFF,0xFF,0x1F,0x03,0x00,0xFF,
	0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x3F,0x7F,
	0xFF,0xF8,0xE0,0xC0,0x80,0x80,0x00,0x00,0x00,0x03,0x03,0x83,0x83,0xC3,0xF3,0xFF,
	0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xC0,0xF0,0xFE,0xFF,0x7F,0x3F,0x3B,0x38,0x38,
	0x38,0x38,0x38,0x38,0x3B,0x3F,0x7F,0xFF,0xFE,0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x06,0x07,0x07,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x07,0x07,0x06,0x00,0x00,0x00,0x07,0x07,0x07,
	0x07,0x00,0x00,0x00,0x00,0x07,0x07,0x07,0x07,0x07,0x07,0x00,0x00,0x00,0x00,0x07,
	0x07,0x07,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
	0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x01,0x03,0x03,0x03,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x03,0x03,0x01,0x07,
	0x07,0x07,0x07,0x00,0x00,0x00,0x06,0x07,0x07,0x07,0x03,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x07,0x07,0x06,0x00,0x00,0x00,0x00,
};

int main(void)
{
	unsigned int i;

	PORTJ_DIR=PIN7_bm|PIN6_bm|PIN5_bm|PIN4_bm|PIN3_bm|PIN2_bm|PIN1_bm|PIN0_bm;
	PORTK_DIR=PIN5_bm|PIN4_bm|PIN3_bm|PIN2_bm|PIN1_bm|PIN0_bm;
	glcd_init();
	
	set_page_left(0);
	set_page_right(0);
	set_y_left(0);
	set_y_right(0);
	for(i=0;i<1024;i++)
	{
		if((i%64)==0)
		{
			if((i%128)==0)
			{
				set_page_left(i/128);
				set_y_left(0);
			}
			else
			{
				set_page_right(i/128);
				set_y_right(0);
			}
		}
		if(i<512) lcd_dataout(xmega[i]);
		else lcd_dataout(0);
	}
	
	while(1);
}

//---------------------------------------------------

void glcd_init(void)
{
	//перезагружаем контроллер
	//ждем, пока питание будет стабильным
	RST_Low();
	_delay_ms(10);
	RST_High();
	_delay_ms(100);
	
	//отключаем оба контроллера
	CS1_High();
	CS2_High();
	//отключаем дисплей
	lcd_command(0x3e);    // display off
	//устанавливаем номер колонки равным 0
	lcd_command(0x40);   
	//устанавливаем номер страницы равным 0
	lcd_command(0xb8);
	//номер линии, начиная с которой данные будут отображаться на дисплее (если 0, то с самого начала, если 10, то 
	//изображение будет смещено на 10 линий вверх, а его невлезшая часть отобразится снизу)
	lcd_command(0xc0); 
	//включаем дисплей
	lcd_command(0x3f);
}

//---------------------------------------------------
//отослать LCD-дисплею инструкцию
void lcd_command(unsigned char command)
{
	//сигнал о том, что будем передавать инструкцию
	RS_Low();
	//отправляем инструкцию
	lcd_data=command;
	//стробирование
	E_High();
	_delay_us(10);
	E_Low();
	_delay_us(10);
}

//---------------------------------------------------
//отослать LCD-дисплею данные
void lcd_dataout(unsigned char data)
{
	//сигнал о том, что будем передавать данные
	RS_High();
	//отправляем данные
	lcd_data=data;
	//стробирование
	E_High();
	_delay_us(10);
	E_Low();
	_delay_us(10);
}

//---------------------------------------------------
//выбираем страницу в левой части дисплея
void set_page_left(unsigned char page)
{
	CS1_High();
	CS2_Low();
	lcd_command(0xb8 + page);
}

//---------------------------------------------------
//выбираем страницу в правой части дисплея
void set_page_right(unsigned char page)
{
	CS1_Low();
	CS2_High();
	lcd_command(0xb8 + page);
}

//---------------------------------------------------
//выбираем номер колонки в левой части дисплея
void set_y_left(unsigned char y)
{
	CS1_High();
	CS2_Low();
	lcd_command(0x40 + y);
}

//---------------------------------------------------
//выбираем номер колонки в правой части дисплея
void set_y_right(unsigned char y)
{
	CS1_Low();
	CS2_High();
	lcd_command(0x40 + y);
}
